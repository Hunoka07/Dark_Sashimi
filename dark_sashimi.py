from rich.console import Console
from rich.panel import Panel
from core.analytics import TargetAnalytics
from core.ai_analyzer import AIAnalyzer
from core.attack_manager import AttackManager
from utils.network import ProxyManager, fetch_user_agents
import config
import time

console = Console()

def main():
    console.clear()
    console.print(Panel.fit(
        f"{config.PROJECT_NAME}\n{config.CREATOR}\nPhi√™n b·∫£n: {config.VERSION}",
        title="üöÄ Dark Sashimi", title_align="left")
    )
    while True:
        target_url = console.input("Nh·∫≠p URL m·ª•c ti√™u (bao g·ªìm http/https, ho·∫∑c b·∫•m Enter ƒë·ªÉ tho√°t): ").strip()
        if not target_url:
            console.print("Kh√¥ng c√≥ URL, tho√°t!")
            return
        fetch_user_agents()
        ProxyManager().load_proxies()
        analytics = TargetAnalytics(target_url)
        target_info, response_obj = analytics.run_analysis()
        if not target_info or not response_obj:
            console.print("Kh√¥ng th·ªÉ ph√¢n t√≠ch m·ª•c ti√™u!")
            continue
        plan = AIAnalyzer(target_info, response_obj).generate_plan()
        console.print(Panel.fit(
            f"AI ƒê·ªÅ Xu·∫•t Chi·∫øn D·ªãch:\n"
            f"‚Ä¢ Vector: {plan['vector']}\n"
            f"‚Ä¢ Threads: {plan['threads']}\n"
            f"‚Ä¢ Mode: {plan['mode']}\n"
            f"‚Ä¢ Threat Level: {plan['threat_level']}\n"
            f"‚Ä¢ Report: {plan['summary_report']}", title="ü§ñ AI Battle Plan"))
        confirm = console.input("B·∫Øt ƒë·∫ßu t·∫•n c√¥ng? (y/n): ").strip().lower()
        if confirm != "y":
            console.print("Chi·∫øn d·ªãch ƒë√£ hu·ª∑.")
            continue
        time.sleep(1)
        attack = AttackManager(
            target_url=target_url,
            vector_choice=plan["vector_id"],
            mode=plan["mode"],
            threads=plan["threads"]
        )
        attack.start_attack()
        console.print(Panel.fit("Chi·∫øn d·ªãch ƒë√£ k·∫øt th√∫c!"))
        again = console.input("T·∫•n c√¥ng m·ª•c ti√™u kh√°c? (y/n): ").strip().lower()
        if again != "y":
            break

if __name__ == "__main__":
    main()
